@import 'variables';

/* stylelint-disable */
@mixin create-media-query($breakpoint) {
  @if ($breakpoint == 0) {
    @content;
  } @else {
    @media screen and (min-width: $breakpoint *1px) {
      @content;
    }
  }
}
/* stylelint-enable */

@for $i from 0 through 8 {
  $spacers: map-merge(
    $spacers,
    (
      $i: (
        $spacer * $i,
      ),
    )
  );
}

/*
spacers: (
0: (
  x: 0,
  y:0
)
)
*/

@mixin create-spacing($modifier, $breakpoint) {
  @include create-media-query($breakpoint) {
    @each $prop, $abbrev in (margin: m, padding: p) {
      @each $size, $length in $spacers {
        .#{$abbrev}#{$modifier}-#{$size} {
          #{$prop}: $length $length !important;
        }
        .#{$abbrev}t#{$modifier}-#{$size} {
          #{$prop}-top: $length !important;
        }
        .#{$abbrev}r#{$modifier}-#{$size} {
          #{$prop}-right: $length !important;
        }
        .#{$abbrev}b#{$modifier}-#{$size} {
          #{$prop}-bottom: $length !important;
        }
        .#{$abbrev}l#{$modifier}-#{$size} {
          #{$prop}-left: $length !important;
        }

        // Axes
        .#{$abbrev}x#{$modifier}-#{$size} {
          #{$prop}-right: $length !important;
          #{$prop}-left: $length !important;
        }
        .#{$abbrev}y#{$modifier}-#{$size} {
          #{$prop}-top: $length !important;
          #{$prop}-bottom: $length !important;
        }
      }
    }
  }
}

@each $modifier, $breakpoint in $grid-props {
  @include create-spacing($modifier, $breakpoint);
}

@mixin create-display($modifier, $breakpoint) {
  @include create-media-query($breakpoint) {
    @each $prop, $abbrev in (display: d) {
      @each $display in $display-group {
        .#{$abbrev}#{$modifier}-#{$display} {
          #{$prop}: $display;
        }
      }
    }
  }
}

@each $modifier, $breakpoint in $grid-props {
  @include create-display($modifier, $breakpoint);
}

@mixin create-text-alignment($modifier, $breakpoint) {
  @include create-media-query($breakpoint) {
    @each $text-align-item in $text-align-group {
      .text#{$modifier}-#{$text-align-item} {
        text-align: $text-align-item;
      }
    }
  }
}

@each $modifier, $breakpoint in $grid-props {
  @include create-text-alignment($modifier, $breakpoint);
}

@mixin create-flex-direction($modifier, $breakpoint) {
  @include create-media-query($breakpoint) {
    @each $flex-direction-item in $flex-direction-group {
      .flex#{$modifier}-#{$flex-direction-item} {
        flex-direction: $flex-direction-item;
      }
    }
  }
}

@each $modifier, $breakpoint in $grid-props {
  @include create-flex-direction($modifier, $breakpoint);
}

@mixin create-justify-content($modifier, $breakpoint) {
  @include create-media-query($breakpoint) {
    @each $justify-content-item in $justify-content-group {
      .justify-content#{$modifier}-#{$justify-content-item} {
        justify-content: $justify-content-item;
      }
    }
  }
}

@each $modifier, $breakpoint in $grid-props {
  @include create-justify-content($modifier, $breakpoint);
}

@mixin create-align-items($modifier, $breakpoint) {
  @include create-media-query($breakpoint) {
    @each $align-item in $align-items-group {
      .align-items#{$modifier}-#{$align-item} {
        align-items: $align-item;
      }
    }
  }
}

@each $modifier, $breakpoint in $grid-props {
  @include create-align-items($modifier, $breakpoint);
}

@mixin create-align-self($modifier, $breakpoint) {
  @include create-media-query($breakpoint) {
    @each $align-self-item in $align-self-group {
      .align-self#{$modifier}-#{$align-self-item} {
        align-self: $align-self-item;
      }
    }
  }
}

@each $modifier, $breakpoint in $grid-props {
  @include create-align-self($modifier, $breakpoint);
}

/* stylelint-disable */
@function valid-radius($radius) {
  $return: ();
  @each $value in $radius {
    @if type-of($value) == number {
      $return: append($return, max($value, 0));
    } @else {
      $return: append($return, $value);
    }
  }
  @return $return;
}
/* stylelint-enable */

/* stylelint-disable */
@mixin border-radius($radius: $border-radius, $fallback-border-radius: false) {
  @if $enable-rounded {
    border-radius: valid-radius($radius);
  } @else if $fallback-border-radius != false {
    border-radius: $fallback-border-radius;
  }
}
/* stylelint-enable */

@mixin border-top-radius($radius) {
  @if $enable-rounded {
    border-top-left-radius: valid-radius($radius);
    border-top-right-radius: valid-radius($radius);
  }
}

@mixin border-right-radius($radius) {
  @if $enable-rounded {
    border-top-right-radius: valid-radius($radius);
    border-bottom-right-radius: valid-radius($radius);
  }
}

@mixin border-bottom-radius($radius) {
  @if $enable-rounded {
    border-bottom-right-radius: valid-radius($radius);
    border-bottom-left-radius: valid-radius($radius);
  }
}

@mixin border-left-radius($radius) {
  @if $enable-rounded {
    border-top-left-radius: valid-radius($radius);
    border-bottom-left-radius: valid-radius($radius);
  }
}

@mixin border-top-left-radius($radius) {
  @if $enable-rounded {
    border-top-left-radius: valid-radius($radius);
  }
}

@mixin border-top-right-radius($radius) {
  @if $enable-rounded {
    border-top-right-radius: valid-radius($radius);
  }
}

@mixin border-bottom-right-radius($radius) {
  @if $enable-rounded {
    border-bottom-right-radius: valid-radius($radius);
  }
}

@mixin border-bottom-left-radius($radius) {
  @if $enable-rounded {
    border-bottom-left-radius: valid-radius($radius);
  }
}
